import React, { useState, useEffect, useCallback } from 'react';
import { v4 as uuidv4 } from 'uuid';

interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  sessionId: string;
}

const Chat: React.FC = () => {
  const N8N_WEBHOOK_URL = 'https://n8n.digitalbiz.tech/webhook/7dd3232a-1926-4cef-84a3-7287b72c561a';
  
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [sessionId, setSessionId] = useState<string>(
    localStorage.getItem('chatSessionId') || uuidv4()
  );

  // Persist session ID to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('chatSessionId', sessionId);
  }, [sessionId]);

  // Function to send a message
  const sendChatMessage = useCallback(async (messageContent: string) => {
    if (!messageContent.trim()) return;
    
    const userMessage: ChatMessage = { 
      id: uuidv4(),
      content: messageContent,
      sender: 'user',
      timestamp: new Date(),
      sessionId: sessionId
    };
    
    setMessages(prev => [...prev, userMessage]);
    setLoading(true);
    
    try {
      const response = await fetch(N8N_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: messageContent,
          sessionId: sessionId,
          timestamp: new Date().toISOString()
        }),
      });
      
      const data = await response.json();
      console.log('AI response:', data);
      
      // Don't show any automatic response to the user
      
    } catch (err) {
      console.error('Error sending message:', err);
      const errorMessage: ChatMessage = {
        id: uuidv4(),
        content: 'Error: Could not reach the server. Please try again.',
        sender: 'ai',
        timestamp: new Date(),
        sessionId: sessionId
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
      setInput('');
    }
  }, [sessionId]);

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim()) {
      sendChatMessage(input);
    }
  };

  // Handle key down in input
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  // Check for pre-filled messages when component mounts
  useEffect(() => {
    const processPostData = async () => {
      try {
        const postDataStr = localStorage.getItem('makePostData');
        if (!postDataStr) return;

        const postData = JSON.parse(postDataStr);
        console.log('Found post data in localStorage:', postData);
        
        let message = '';
        
        // Handle different post types
        switch (postData.type) {
          case 'article':
            if (!postData.title || !postData.summary) {
              throw new Error('Missing required article fields');
            }
            message = `Create a post about the following article\n\n` +
                     `**Title:** ${postData.title}\n` +
                     `**Summary:** ${postData.summary}` +
                     (postData.url ? `\n**URL:** ${postData.url}` : '');
            break;
            
          case 'blog':
            if (!postData.title || !postData.content) {
              throw new Error('Missing required blog fields');
            }
            message = `Create a social media post about the following blog:\n\n` +
                     `**Title:** ${postData.title}\n` +
                     `**Summary:** ${postData.content.substring(0, 200)}` +
                     (postData.url ? `\n**URL:** ${postData.url}` : '');
            break;
            
          case 'template':
            if (!postData.name) {
              throw new Error('Missing required template name');
            }
            message = `Make post using template: ${postData.name}`;
            break;
            
          default:
            console.warn('Unknown post type:', postData.type);
            return;
        }
        
        console.log('Processing pre-filled message:', message);
        await sendChatMessage(message);
        
      } catch (e) {
        console.error('Error processing post data:', e);
      } finally {
        // Always clean up the storage
        localStorage.removeItem('makePostData');
      }
    };
    
    processPostData();
  }, [sendChatMessage]);

  // Start a new chat session
  const startNewChat = () => {
    setMessages([]);
    const newId = uuidv4();
    setSessionId(newId);
    localStorage.setItem('chatSessionId', newId);
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex justify-between items-center p-4 border-b">
        <h2 className="text-lg font-semibold">Chat</h2>
        <button
          onClick={startNewChat}
          className="px-3 py-1 text-sm bg-gray-200 rounded hover:bg-gray-300"
        >
          New Chat
        </button>
      </div>
      
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-3/4 px-4 py-2 rounded-lg ${
                msg.sender === 'user'
                  ? 'bg-blue-500 text-white rounded-br-none'
                  : 'bg-gray-200 text-gray-800 rounded-bl-none'
              }`}
            >
              {msg.content.split('\n').map((line, i) => (
                <p key={i} className="whitespace-pre-wrap">
                  {line}
                </p>
              ))}
              <div className="text-xs opacity-70 mt-1">
                {msg.timestamp.toLocaleTimeString()}
              </div>
            </div>
          </div>
        ))}
        {loading && (
          <div className="flex justify-start">
            <div className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg rounded-bl-none">
              Thinking...
            </div>
          </div>
        )}
      </div>
      
      <form onSubmit={handleSubmit} className="p-4 border-t">
        <div className="flex space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type your message..."
            className="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            disabled={loading}
          />
          <button
            type="submit"
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            disabled={!input.trim() || loading}
          >
            Send
          </button>
        </div>
      </form>
    </div>
  );
};

export default Chat;
